---
- hosts: localhost
  gather_facts: false
  vars:
    size: 2000
    kernel: False
    gma500: False
    usetarball: False
    hostname: 'joggler'
    enable_sleep: False
    disable_brightnessd: False
    timezone: False
    add_jivelite: False
    wl_ssid: False
    wl_psk: False

  tasks:

    - name: Install required packages
      become: true
      apt:
        update_cache: true
        state: present
        name:
          - coreutils
          - debian-archive-keyring
          - debootstrap
          - mount
          - parted
          - xz-utils
          - zerofree

    - name: Create image file
      command: 'truncate -s{{ size }}MB {{ inventory_dir }}/joggler.img'

    - name: Set up partitions
      become: true
      parted:
        device: '{{ inventory_dir }}/joggler.img'
        state: present
        label: msdos
        number: '{{ item.number }}'
        part_type: primary
        part_start: '{{ item.start }}'
        part_end: '{{ item.end }}'
        flags: '{{ item.flags }}'
      with_items:
        - { number: 1, start: 1MB, end: 64MB, flags: ['boot'] }
        - { number: 2, start: 64MB, end: 100%, flags: [] }

    - name: Attach loop device
      become: true
      command: 'losetup --partscan --show --find {{ inventory_dir }}/joggler.img'
      register: loop_device

    - name: Format partitions
      become: true
      filesystem:
        dev: '{{ item.dev }}'
        force: true
        fstype: '{{ item.fstype }}'
        opts: '{{ item.opts }}'
      with_items:
        - { dev: '{{ loop_device.stdout_lines[0] }}p1', fstype: vfat, opts: '-n jogglerboot' }
        - { dev: '{{ loop_device.stdout_lines[0] }}p2', fstype: ext4, opts: '-L jogglerroot' }

    - name: Create dummy fstab
      copy:
        dest: fstab
        content: ''

    - name: Create root mountpoint
      file:
        path: '{{ inventory_dir }}/root'
        state: directory
        recurse: true
        force: true

    - name: Mount root partition
      become: true
      mount:
        path: '{{ inventory_dir }}/root'
        src: LABEL=jogglerroot
        opts: errors=remount-ro,noatime
        fstype: ext4
        fstab: fstab
        state: mounted

    - name: Create boot mountpoint
      become: true
      file:
        path: '{{ inventory_dir }}/root/boot/efi'
        state: directory
        recurse: true
        force: true

    - name: Mount boot partition
      become: true
      mount:
        path: '{{ inventory_dir }}/root/boot/efi'
        src: LABEL=jogglerboot
        fstype: vfat
        fstab: fstab
        state: mounted

    - name: Set debootstrap flags
      set_fact:
        debootstrap_arguments: '--arch i386 --components main,contrib,non-free --include apt-transport-https,busybox,dbus,firmware-misc-nonfree,grub-efi-ia32,initramfs-tools,initramfs-tools-core,klibc-utils,libklibc,linux-base,openssh-server,plymouth,plymouth-themes,sudo,wpasupplicant --exclude dmidecode,irqbalance buster {{ inventory_dir }}/root'

    - name: Check for packages tarball
      stat:
        path: '{{ inventory_dir }}/packages.tgz'
      when: usetarball
      register: tarball_exists

    - name: Create packages tarball
      become: true
      command: 'debootstrap --make-tarball {{ inventory_dir }}/packages.tgz {{ debootstrap_arguments }}'
      when: 'usetarball and not tarball_exists.stat.exists'
      ignore_errors: true

    - name: Install base system
      become: true
      command: '{{ item }}'
      with_items:
        - "debootstrap --foreign {{ '--unpack-tarball '+inventory_dir+'/packages.tgz' if usetarball else '' }} {{ debootstrap_arguments }}"
        - 'chroot {{ inventory_dir }}/root /debootstrap/debootstrap --second-stage'

    - name: Bind mounts
      become: true
      mount:
        path: '{{ inventory_dir }}/root/{{ item }}'
        src: '/{{ item }}'
        fstype: none
        opts: bind
        fstab: fstab
        state: mounted
      with_items: [ 'dev', 'dev/pts', 'sys', 'proc', 'run' ]
 
    - name: Copy files
      become: true
      copy:
        dest: '{{ item.dest }}'
        src: '{{ item.src }}'
        mode: '{{ item.mode | default(0644) }}'
      with_items:
        - { dest: '{{ inventory_dir }}/root/etc/apt/sources.list', src: 'files/sources.list' }
        - { dest: '{{ inventory_dir }}/root/etc/fstab', src: 'files/fstab' }
        - { dest: '{{ inventory_dir }}/root/usr/sbin/openframe-mac', src: 'files/openframe-mac', mode: '0755' }
        - { dest: '{{ inventory_dir }}/root/lib/systemd/system/openframe-mac.service', src: 'files/openframe-mac.service' }
        - { dest: '{{ inventory_dir }}/root/etc/systemd/network/ethernet.network', src: 'files/ethernet.network' }
        - { dest: '{{ inventory_dir }}/root/etc/systemd/network/wireless.network', src: 'files/wireless.network' }
        - { dest: '{{ inventory_dir }}/root/etc/hosts', src: 'files/hosts' }
        - { dest: '{{ inventory_dir }}/root/etc/rsyslog.conf', src: 'files/rsyslog.conf' }

    - name: Create link
      become: true
      file:
        src: /lib/systemd/network/99-default.link
        dest: '{{ inventory_dir }}/root/etc/systemd/network/99-default.link'
        state: link

    - name: Add graphics drivers to initrd
      become: true
      lineinfile:
        line: '{{ item }}'
        path: '{{ inventory_dir }}/root/etc/initramfs-tools/modules'
        regexp: '^(#\s*)?{{ item }}\s*$'
      with_items:
        - drm
        - bochs_drm modeset=1
        - gma500_gfx modeset=1
      when: "not not gma500 or item != 'gma500 modeset=1'"

    - name: Set splash theme
      become: true
      command: 'chroot {{ inventory_dir }}/root plymouth-set-default-theme solar'

    - name: Install standard kernel
      become: true
      command: 'chroot {{ inventory_dir }}/root apt-get install --assume-yes --allow-unauthenticated linux-image-686'
      when: not kernel

    - name: Install custom kernel
      become: true
      block:
        - find:
            paths: '{{ inventory_dir }}/kernel'
            patterns: 'linux-image-{{ kernel }}_*.deb'
          register: kernel_image
        - copy:
            dest: "{{ inventory_dir }}/root/{{ (kernel_image.files | last).path | regex_replace('.*/', '') }}"
            src: '{{ (kernel_image.files | last).path }}'
        - command: "chroot {{ inventory_dir }}/root dpkg --install /{{ (kernel_image.files | last).path | regex_replace('.*/', '') }}"
        - file:
            path: '{{ item }}'
            state: absent
          with_items:
            - "{{ inventory_dir }}/root/{{ (kernel_image.files | last).path | regex_replace('.*/', '') }}"
      when: not not kernel

    - name: Set GRUB options
      become: true
      vars:
        blacklist: "modprobe.blacklist=floppy{{ ',gma500_gfx' if not gma500 else '' }}"
      lineinfile:
        line: '{{ item.key }}={{ item.value }}'
        path: '{{ inventory_dir }}/root/etc/default/grub'
        regexp: '^(#\s*)?{{ item.key }}\s*='
      with_items:
        - { key: GRUB_CMDLINE_LINUX, value: '"quiet splash"' }
        - { key: GRUB_CMDLINE_LINUX_DEFAULT, value: '"acpi=force acpi_backlight=vendor intel_idle.max_cstate=2 irqpoll panic=30 reboot=acpi biosdevname=0 hpet=disable {{ blacklist }} video=800x480"' }
        - { key: GRUB_BADRAM, value: '"0x01000000,0xff000000"' }
        - { key: GRUB_GFXMODE, value: '800x480' }
        - { key: GRUB_GFXPAYLOAD_LINUX, value: keep }
        - { key: GRUB_TERMINAL_OUTPUT, value: gfxterm }
        - { key: GRUB_TIMEOUT, value: 0 }
        - { key: GRUB_TIMEOUT_STYLE, value: hidden }
        - { key: GRUB_DISABLE_OS_PROBER, value: true }

    - name: Set hard coded values in /etc/grub.d/10_linux
      become: true
      lineinfile:
        line: '{{ item }}="1"'
        path: '{{ inventory_dir }}/root/etc/grub.d/10_linux'
        regexp: '^(#\s*)?{{ item }}\s*='
      with_items:
        - quiet_boot
        - vt_handoff

    - name: Install GRUB
      become: true
      command: 'chroot {{ inventory_dir }}/root grub-install --target i386-efi --removable'

    - name: Create GRUB configuration
      become: true
      command: 'chroot {{ inventory_dir }}/root grub-mkconfig --output=/boot/grub/grub.cfg'

    - name: Create boot scripts
      become: true
      copy:
        dest: '{{ inventory_dir }}/root/boot/efi/{{ item.dest }}'
        content: '{{ item.content }}'
      with_items:
        - { dest: boot.nsh, content: "fs1:\ncd EFI\ncd debian\ngrub\nfs1:\ncd EFI\ncd debian\ngrub\n" }
        - { dest: startup.nsh, content: "fs1:\nboot\nfs0:\nboot\n" }

    - name: Enable openframe-mac script on boot
      become: true
      command: 'chroot {{ inventory_dir }}/root systemctl enable openframe-mac'

    - name: Enable systemd-networkd
      become: true
      command: 'chroot {{ inventory_dir }}/root systemctl enable systemd-networkd'

    - name: Enable systemd-resolved
      become: true
      command: 'chroot {{ inventory_dir }}/root systemctl enable systemd-resolved'

    - name: Set wireless configuration
      become: true
      copy:
        dest: '{{ inventory_dir }}/root/etc/wpa_supplicant/wpa_supplicant-wlp0s29f7u5.conf'
        content: "network={\n  ssid=\"{{ wl_ssid }}\"\n  psk=\"{{ wl_psk }}\"\n}"
      when: 'wl_ssid and wl_psk'

    - name: Enable wireless configuration
      become: true
      command: 'chroot {{ inventory_dir }}/root systemctl enable wpa_supplicant@wlp0s29f7u5'
      when: 'wl_ssid and wl_psk'

    - name: Boot in multi-user mode
      become: true
      command: 'chroot {{ inventory_dir }}/root systemctl set-default multi-user.target'

    - name: Set hostname
      become: true
      copy:
        dest: '{{ inventory_dir }}/root/etc/hostname'
        content: '{{ hostname }}'

    - name: Audio configuration
      vars:
        ansible_become: true
      include_role:
        name: audio

    - name: Add user
      become: true
      command: 'chroot {{ inventory_dir }}/root useradd --home-dir /home/joggler --groups sudo,audio,video --create-home --password sa0dkJX04f4tM --shell /bin/bash joggler'

    - name: Disable sleep
      become: true
      command: 'chroot {{ inventory_dir }}/root systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target'
      when: not enable_sleep

    - name: Make logind not suspend
      become: true
      lineinfile:
        path: '{{ inventory_dir }}/root/etc/systemd/logind.conf'
        regexp: 'HandleLidSwitch='
        line: 'HandleLidSwitch=ignore'
      when: not enable_sleep

    - name: Install brightnessd
      vars:
        ansible_become: true
      include_role:
        name: brightnessd
      when: not disable_brightnessd

    - name: Configure timezone
      vars:
        ansible_become: true
      include_role:
        name: timezone
      when: 'timezone'

    - name: Add JiveLite
      vars:
        ansible_become: true
      include_role:
        name: jivelite
      when: add_jivelite

    - name: Clear apt cache and logs
      become: true
      file:
        path: '{{ item.path }}'
        state: '{{ item.state }}'
        mode: '{{ item.mode | default(None) }}'
      with_items:
        - { path: '{{ inventory_dir }}/root/var/cache/apt/archives', state: absent }
        - { path: '{{ inventory_dir }}/root/var/lib/apt/lists', state: absent }
        - { path: '{{ inventory_dir }}/root/var/log', state: absent }
        - { path: '{{ inventory_dir }}/root/var/cache/apt/archives', state: directory, mode: '1777' }
        - { path: '{{ inventory_dir }}/root/var/lib/apt/lists', state: directory, mode: '1777' }
        - { path: '{{ inventory_dir }}/root/var/log', state: directory, mode: '1777' }

    - name: Unmount everything
      become: true
      mount:
        path: '{{ inventory_dir }}/root/{{ item }}'
        src: '/{{ item }}'
        fstype: none
        opts: bind
        fstab: fstab
        state: unmounted
      with_items: [ 'run', 'proc', 'sys', 'dev/pts', 'dev', 'boot/efi', '' ]

    - name: Erase unused space
      become: true
      command: 'zerofree {{ loop_device.stdout_lines[0] }}p2'

    - name: Detach loop device
      become: true
      command: 'losetup --detach {{ loop_device.stdout_lines[0] }}'

    - name: Compress image
      command: 'xz -zvv {{ inventory_dir }}/joggler.img'

    - name: Clean up work files
      become: true
      file:
        path: '{{ item }}'
        state: absent
      with_items:
        - fstab
        - joggler.img
        - root
